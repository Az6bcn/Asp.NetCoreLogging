{
  "Logging": {
    // log level
    "LogLevel": {
      // log debug for everything else
      "Default": "Debug",
      // specify log level (Information and higher) to be logged for specific namespace e.g Microsoft.AspNetCore/EFCore
      "Microsoft": "Information"
    },
    // specify logging providers: A logging provider displays or stores logs.
    "Console": {
      // add configuration provider if any
    }
  },


  "Serilog": {
    "MinimumLevel": {
      // tells logger to log at debug level for everything else
      "Default": "Debug",
      // override the logger to override the deafult debug for certain namespaces i.e for the specified namespace the logger will log at the level specified e.g warning, information etc.
      "Override": {
        // specify to log Warning and higher for Microsoft namespace
        "Microsoft": "Warning",
        // specify to log Warning and higher for System namespace
        "System": "Warning",
        // specify to log Warning and higher for IdentityServer4 namespace
        "IdentityServer4": "Information",
        // specify to log Warning and higher for Microsoft.EFCore namespace
        "Microsoft.EntityFrameworeCore": "Information"
      }
    }
  }

}
/*
  https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.loglevel?view=dotnet-plat-ext-3.1
  log levels: Critical,  Debug,  Error,  Information,  None,  Trace,  Warning

  
  //  From the example we saw that we can configure a default minimum level of logging .MinimumLevel.Debug(). 
      We can also override that default for certain namespaces, for example here we set the minimum level of logging for Microsoft namespace to Information.
  https://stackoverflow.com/questions/54990647/what-does-minimumlevel-and-override-mean-in-appsettings-json-logging-context
*/
